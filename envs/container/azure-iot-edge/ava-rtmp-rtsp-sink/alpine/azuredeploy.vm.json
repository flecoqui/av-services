{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "namePrefix": {
      "type": "string",
      "minLength": 2,
      "maxLength": 50,
      "metadata": {
        "description": "Service name prefix must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and is limited between 2 and 50 characters in length."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
      }
    },
    "vmAdminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended. Use \"ssh-keygen -t rsa -b 2048\" to generate your SSH key pairs."
      }
    },
    "sshClientIPAddress": {
      "type": "string",
      "metadata": {
        "description": "IP Address of the ssh client. It will be stored in NSG."
      }
    },    
    "deviceConnectionString": {
      "type": "string",
      "metadata": {
        "description": "Iot Edge connection string."
      }
    },    
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS3_v2",
      "metadata": {
        "description": "Virtual Machine Size: Standard_DS3_v2"
      }
    },
    "portHTTP": {
      "type": "string",
      "defaultValue": "80",
      "metadata": {
        "description": "http port"
      }
    },
    "portSSL": {
      "type": "string",
      "defaultValue": "443",
      "metadata": {
        "description": "ssl port"
      }
    },
    "portHLS": {
      "type": "string",
      "defaultValue": "8080",
      "metadata": {
        "description": "hls port"
      }
    },    
    "portRTMP": {
      "type": "string",
      "defaultValue": "1935",
      "metadata": {
        "description": "rtmp port"
      }
    },
    "portRTSP": {
      "type": "string",
      "defaultValue": "8554",
      "metadata": {
        "description": "rtsp port"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "rtmprtspavasto",
      "metadata": {
        "description": "Storage Account Name to be used ith the virtual machine"
      }
    },
    "expiryDate": {
      "type": "string",
      "defaultValue": "2030-01-01T00:00:01Z",
      "metadata": {
        "description": "Expiry date of the SAS token"
      }
    }
  },
  "variables": {
    "dcs": "[parameters('deviceConnectionString')]",
    "avAdmin": "[parameters('vmAdminUsername')]",
    "location": "[resourceGroup().location]",
    "vmName": "[concat(parameters('namePrefix'), 'vm')]",
    "vmDataDiskSize": "512",
    "replicaCount": "1",
    "partitionCount": "1",
    "hostingMode": "default",
    "apiVersion": "2015-06-15",
    "networkSecurityGroupName": "[concat(parameters('namePrefix'), 'nsg')]",
    "serviceSasFunctionValues": {
      "signedServices": "b",
      "signedResourceTypes": "sco",
      "signedPermission": "rwdlac",
      "signedStart": "2020-01-01T00:00:01Z",
      "signedExpiry": "2030-01-01T00:00:01Z",
      "signedProtocol": "https",
      "keyToSign": "key1"
    },
    "nicName": "[concat(parameters('namePrefix'), 'nic')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "[concat(parameters('namePrefix'), 'subnet')]",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressName": "[concat(parameters('namePrefix'), 'ip')]",
    "publicIPAddressType": "Dynamic",
    "virtualNetworkName": "[concat(parameters('namePrefix'), 'vnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('vmAdminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('vmAdminPasswordOrKey')]"
          }
        ]
      }
    } 
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "SSH port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[parameters('sshClientIPAddress')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "hls",
            "properties": {
              "description": "hls server port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[parameters('portHLS')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "http",
            "properties": {
              "description": "http server port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[parameters('portHTTP')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 104,
              "direction": "Inbound"
            }
          },
          {
            "name": "ssl",
            "properties": {
              "description": "ssl server port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[parameters('portSSL')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Inbound"
            }
          },          
          {
            "name": "rtmp",
            "properties": {
              "description": "rtmp port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[parameters('portRTMP')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "rtsp",
            "properties": {
              "description": "rtsp server port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "[parameters('portRTSP')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 106,
              "direction": "Inbound"
            }
          },
          {
            "name": "rtspudp1",
            "properties": {
              "description": "rtsp server udp port",
              "protocol": "Udp",
              "sourcePortRange": "*",
              "destinationPortRange": "[parameters('portRTSP')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 107,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('vmName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPasswordOrKey')]",
          "customData": "[base64(concat('#cloud-config\n\napt:\n  preserve_sources_list: true\n  sources:\n    msft.list:\n      source: \"deb https://packages.microsoft.com/ubuntu/18.04/multiarch/prod bionic main\"\n      key: |\n        -----BEGIN PGP PUBLIC KEY BLOCK-----\n        Version: GnuPG v1.4.7 (GNU/Linux)\n\n        mQENBFYxWIwBCADAKoZhZlJxGNGWzqV+1OG1xiQeoowKhssGAKvd+buXCGISZJwT\n        LXZqIcIiLP7pqdcZWtE9bSc7yBY2MalDp9Liu0KekywQ6VVX1T72NPf5Ev6x6DLV\n        7aVWsCzUAF+eb7DC9fPuFLEdxmOEYoPjzrQ7cCnSV4JQxAqhU4T6OjbvRazGl3ag\n        OeizPXmRljMtUUttHQZnRhtlzkmwIrUivbfFPD+fEoHJ1+uIdfOzZX8/oKHKLe2j\n        H632kvsNzJFlROVvGLYAk2WRcLu+RjjggixhwiB+Mu/A8Tf4V6b+YppS44q8EvVr\n        M+QvY7LNSOffSO6Slsy9oisGTdfE39nC7pVRABEBAAG0N01pY3Jvc29mdCAoUmVs\n        ZWFzZSBzaWduaW5nKSA8Z3Bnc2VjdXJpdHlAbWljcm9zb2Z0LmNvbT6JATUEEwEC\n        AB8FAlYxWIwCGwMGCwkIBwMCBBUCCAMDFgIBAh4BAheAAAoJEOs+lK2+EinPGpsH\n        /32vKy29Hg51H9dfFJMx0/a/F+5vKeCeVqimvyTM04C+XENNuSbYZ3eRPHGHFLqe\n        MNGxsfb7C7ZxEeW7J/vSzRgHxm7ZvESisUYRFq2sgkJ+HFERNrqfci45bdhmrUsy\n        7SWw9ybxdFOkuQoyKD3tBmiGfONQMlBaOMWdAsic965rvJsd5zYaZZFI1UwTkFXV\n        KJt3bp3Ngn1vEYXwijGTa+FXz6GLHueJwF0I7ug34DgUkAFvAs8Hacr2DRYxL5RJ\n        XdNgj4Jd2/g6T9InmWT0hASljur+dJnzNiNCkbn9KbX7J/qK1IbR8y560yRmFsU+\n        NdCFTW7wY0Fb1fWJ+/KTsC4=\n        =J6gs\n        -----END PGP PUBLIC KEY BLOCK----- \npackages:\n  - moby-cli\n  - moby-engine\nruncmd:\n  - dcs=\"', variables('dcs'),'\"\n  - avadmin=\"', variables('avAdmin'),'\"\n  - |\n      set -x\n      (\n        echo \"Device connection string: $dcs\"\n\n        # Wait for docker daemon to start\n        while [ $(ps -ef | grep -v grep | grep docker | wc -l) -le 0 ]; do \n          sleep 3\n        done\n\n        apt install aziot-identity-service=1.2.0-1\n        apt install aziot-edge=1.2.0-1\n\n        if [ ! -z $dcs ]; then\n          mkdir /etc/aziot\n          wget https://raw.githubusercontent.com/Azure/iotedge-vm-deploy/1.2.0/config.toml -O /etc/aziot/config.toml\n          sed -i \"s#\\(connection_string = \\).*#\\1\\\"$dcs\\\"#g\" /etc/aziot/config.toml\n          iotedge config apply -c /etc/aziot/config.toml\n        fi\n\n\n        mkdir /home/$avadmin/samples\n        mkdir /home/$avadmin/samples/input\n        mkdir /home/$avadmin/samples/output\n        curl https://avamedia.blob.core.windows.net/public/camera-300s.mkv > /home/$avadmin/samples/input/camera-300s.mkv\n        curl https://avamedia.blob.core.windows.net/public/lots_284.mkv > /home/$avadmin/samples/input/lots_284.mkv\n        curl https://avamedia.blob.core.windows.net/public/lots_015.mkv > /home/$avadmin/samples/input/lots_015.mkv\n        curl https://avamedia.blob.core.windows.net/public/t2.mkv > /home/$avadmin/samples/input/t2.mkv\n        curl https://avamedia.blob.core.windows.net/public/retailshop-15fps.mkv > /home/$avadmin/samples/input/retailshop-15fps.mkv\n        chown -R {AV_ADMIN} /home/$avadmin/samples/\n        mkdir /var/local/mediaservices\n        mkdir /var/local/mediaservices/tmp\n        mkdir /var/lib/azuremediaservices\n        mkdir /var/media\n        chown -R $avadmin /var/local/mediaservices/\n        chown -R $avadmin /var/lib/azuremediaservices\n        chown -R $avadmin /var/media\n        apt install -y deviceupdate-agent \n        apt install -y deliveryoptimization-plugin-apt\n        systemctl restart adu-agent\n      ) &\n\n'))]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18.04-LTS",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          },
          "dataDisks": [
            {
              "diskSizeGB": 1023,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',parameters('storageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    }    
  ],
  "outputs": {
    "httpPlayerCmd": {
      "type": "string",
      "value": "[concat('http://',variables('vmName'),'.', resourceGroup().location, '.cloudapp.azure.com/player.html')]"
    },
    "rtmpUrl": {
      "type": "string",
      "value": "[concat('http://',variables('vmName'),'.', resourceGroup().location, '.cloudapp.azure.com:1935/live/stream')]"
    },
    "hlsUrl": {
      "type": "string",
      "value": "[concat('http://',variables('vmName'),'.', resourceGroup().location, '.cloudapp.azure.com:8080/live/stream.m3u8')]"
    },
    "rtspUrl": {
      "type": "string",
      "value": "[concat('http://',variables('vmName'),'.', resourceGroup().location, '.cloudapp.azure.com:8554/rtsp/stream')]"
    },
    "ffmpegCmd": {
      "type": "string",
      "value": "[concat('ffmpeg.exe -v verbose -f dshow -i video=\"Integrated Webcam\":audio=\"Microphone (Realtek(R) Audio)\"  -video_size 1280x720 -strict -2 -c:a aac -b:a 192k -ar 44100 -r 30 -g 60 -keyint_min 60 -b:v 2000000 -c:v libx264 -preset veryfast  -profile main -level 3.0 -pix_fmt yuv420p -bufsize 1800k -maxrate 400k  -f flv rtmp://',variables('vmName'),'.', resourceGroup().location, '.cloudapp.azure.com:1935/live/stream')]"
    }
  }
}